<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.uengine.garuda.web.product.event.SubscriptionEventRepository">
    <insert id="insert" parameterType="org.uengine.garuda.model.SubscriptionEventsExt"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO subscription_events_ext (
        subscription_id,
        event_type,
        user_type,
        plan_name,
        product_id,
        version,
        account_id,
        organization_id,
        tenant_id,
        account_record_id,
        tenant_record_id
        )
        VALUES (
        #{subscription_id},
        #{event_type},
        #{user_type},
        #{plan_name},
        #{product_id},
        #{version},
        #{account_id},
        #{organization_id},
        #{tenant_id},
        #{account_record_id},
        #{tenant_record_id}
        )
    </insert>

    <select id="selectById" parameterType="java.lang.Long" resultType="org.uengine.garuda.model.SubscriptionEventsExt">
        SELECT * FROM subscription_events_ext
        WHERE id = #{id}
    </select>

    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM subscription_events_ext
        WHERE id = #{id}
    </delete>

    <select id="selectSubscriptionCountByProductVersion" parameterType="map" resultType="map">
        select
        C.plan_name,
        sum(C.referenced) as number_of_subscriptions_referenced_by_version,
        sum(C.subscriptions) as number_of_subscriptions
        from

        (select
        A.plan_name,
        count(*) as referenced,
        0 as subscriptions
        FROM
        (SELECT * from subscription_events_ext
                WHERE organization_id = #{organization_id}
                AND subscription_id is not null
                AND product_id = #{product_id}
                AND version = #{version}
                AND (user_type = 'CHANGE' OR user_type = 'CREATE')
                group by subscription_id,plan_name)A
                GROUP BY A.plan_name

        union all

        SELECT
        B.plan_name,
        0 as referenced,
        count(*) as subscriptions
        from
                (
                SELECT plan_name,product_id,version,subscription_id from
                (SELECT * from subscription_events_ext
                WHERE organization_id = #{organization_id}
                AND subscription_id is not null
                AND product_id = #{product_id}
                AND (user_type = 'CHANGE' OR user_type = 'CREATE')
                ORDER BY id DESC) A
                GROUP BY A.subscription_id
                )B
                GROUP BY B.plan_name)C
        group by C.plan_name
    </select>
</mapper>